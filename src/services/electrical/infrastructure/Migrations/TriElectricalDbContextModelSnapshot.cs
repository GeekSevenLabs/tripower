// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TriPower.Electrical.Infrastructure.Contexts;

#nullable disable

namespace TriPower.Electrical.Infrastructure.Migrations
{
    [DbContext(typeof(TriElectricalDbContext))]
    partial class TriElectricalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "10.0.0-preview.6.25358.103")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TriPower.Electrical.Domain.Circuits.Circuit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.ComplexProperty<Dictionary<string, object>>("Voltage", "TriPower.Electrical.Domain.Circuits.Circuit.Voltage#VoltageVo", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Mode")
                                .HasColumnType("int");

                            b1.Property<int>("Type")
                                .HasColumnType("int");
                        });

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RoomId");

                    b.ToTable("Circuits");

                    b.HasDiscriminator<int>("Category");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TriPower.Electrical.Domain.Projects.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Area")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Classification")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Perimeter")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("TriPower.Electrical.Domain.Projects.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Phases")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VoltageType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("TriPower.Electrical.Domain.Circuits.GeneralSocketsCircuit", b =>
                {
                    b.HasBaseType("TriPower.Electrical.Domain.Circuits.Circuit");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("TriPower.Electrical.Domain.Circuits.LightingCircuit", b =>
                {
                    b.HasBaseType("TriPower.Electrical.Domain.Circuits.Circuit");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("TriPower.Electrical.Domain.Circuits.SpecificCircuit", b =>
                {
                    b.HasBaseType("TriPower.Electrical.Domain.Circuits.Circuit");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("TriPower.Electrical.Domain.Circuits.Circuit", b =>
                {
                    b.HasOne("TriPower.Electrical.Domain.Projects.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TriPower.Electrical.Domain.Projects.Entities.Room", null)
                        .WithMany("Circuits")
                        .HasForeignKey("RoomId");
                });

            modelBuilder.Entity("TriPower.Electrical.Domain.Projects.Entities.Room", b =>
                {
                    b.HasOne("TriPower.Electrical.Domain.Projects.Project", null)
                        .WithMany("Rooms")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("TriPower.Electrical.Domain.Projects.ValueObjects.GeneralSocketsVo", "GeneralSockets", b1 =>
                        {
                            b1.Property<Guid>("RoomId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("CorrectedCount")
                                .HasColumnType("int");

                            b1.Property<int>("CorrectedLoad")
                                .HasColumnType("int");

                            b1.Property<int>("Modifier")
                                .HasColumnType("int");

                            b1.Property<int>("RequiredCount")
                                .HasColumnType("int");

                            b1.Property<int>("RequiredLoad")
                                .HasColumnType("int");

                            b1.HasKey("RoomId");

                            b1.ToTable("Rooms");

                            b1.WithOwner()
                                .HasForeignKey("RoomId");
                        });

                    b.OwnsOne("TriPower.Electrical.Domain.Projects.ValueObjects.LightingVo", "Lighting", b1 =>
                        {
                            b1.Property<Guid>("RoomId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("MinimumLoad")
                                .HasColumnType("int");

                            b1.HasKey("RoomId");

                            b1.ToTable("Rooms");

                            b1.WithOwner()
                                .HasForeignKey("RoomId");
                        });

                    b.Navigation("GeneralSockets")
                        .IsRequired();

                    b.Navigation("Lighting")
                        .IsRequired();
                });

            modelBuilder.Entity("TriPower.Electrical.Domain.Projects.Entities.Room", b =>
                {
                    b.Navigation("Circuits");
                });

            modelBuilder.Entity("TriPower.Electrical.Domain.Projects.Project", b =>
                {
                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
